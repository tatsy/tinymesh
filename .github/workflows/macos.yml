name: MacOS CI

on:
  push:
    branches:
      - master
      - dev
    tags:
      - v*

env:
  BUILD_TYPE: Release
  GNU_CC: /usr/local/bin/gcc-9
  GNU_CXX: /usr/local/bin/g++-9
  LLVM_CC: /usr/local/opt/llvm/bin/clang
  LLVM_CXX: /usr/local/opt/llvm/bin/clang++

jobs:
  macos:
    runs-on: macos-latest

    strategy:
      matrix:
        compiler: [gcc, clang]

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Set up Python version
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry
          poetry config virtualenvs.path ~/.local/share/virtualenvs

      - name: Cache Poetry
        uses: actions/cache@v3
        id: poetry-cache
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-poetry-${{ hashFiles('**/pyproject.toml') }}

      - name: Install GNU C/C++ compiler
        if: ${{ matrix.compiler == 'gcc' }}
        run: |
          brew install gcc@9
          export GNU_CC=gcc-9
          export GNU_CXX=g++-9

      - name: Install LLVM Clang
        if: ${{ matrix.compiler == 'clang' }}
        run: |
          brew install llvm
          export LLVM_CC=clang-10
          export LLVM_CXX=clang++-10

      - name: Install Google Test
        env:
          C_COMPILER: ${{ matrix.compiler }}
        run: |
          git clone https://github.com/google/googletest.git --depth 1
          cd googletest
          mkdir build
          cd build

          if [ "$C_COMPILER" = "gcc" ]; then
            cmake .. \
              -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
              -DCMAKE_C_COMPILER=$GNU_CC \
              -DCMAKE_CXX_COMPILER=$GNU_CXX
          fi

          if [ "$C_COMPILER" = "clang" ]; then
            cmake .. \
              -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
              -DCMAKE_C_COMPILER=$LLVM_CC \
              -DCMAKE_CXX_COMPILER=$LLVM_CXX
          fi

          cmake --build . --config $BUILD_TYPE --parallel 2
          cmake --build . --target install

      - name: CMake build
        env:
          C_COMPILER: ${{ matrix.compiler }}
        run: |
          cmake -E make_directory ${{runner.workspace}}/build
          cd ${{runner.workspace}}/build

          if [ "$C_COMPILER" = "gcc" ]; then
            cmake $GITHUB_WORKSPACE \
              -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
              -DCMAKE_C_COMPILER=$GNU_CC \
              -DCMAKE_CXX_COMPILER=$GNU_CXX \
              -DBUILD_EXAMPLES=ON \
              -DBUILD_TESTS=ON 
          fi

          if [ "$C_COMPILER" = "clang" ]; then
            cmake $GITHUB_WORKSPACE \
              -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
              -DCMAKE_C_COMPILER=$LLVM_CC \
              -DCMAKE_CXX_COMPILER=$LLVM_CXX \
              -DBUILD_EXAMPLES=ON \
              -DBUILD_TESTS=ON 
          fi

          cmake --build . --config $BUILD_TYPE --parallel 2

      - name: Unit test
        working-directory: ${{runner.workspace}}/build
        shell: bash
        run: ctest -C $BUILD_TYPE

      - name: Install Python modules
        if: steps.pipenv-cache.outputs.cache-hit != 'true'
        run: |
          poetry install

      - name: Python module test
        run: |
          poetry run pytest -s tests
